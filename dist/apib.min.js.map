{"version":3,"file":"apib.min.js","sources":["../lib/apib.js"],"sourcesContent":["'use strict'\r\n\r\nimport { version } from '../package.json'\r\n\r\nclass API {\r\n  version = version\r\n\r\n  /**\r\n   * 将对象转为 URL QueryString\r\n   *\r\n   * @param {object} data\r\n   */\r\n  param(data) {\r\n    // https://jsperf.com/array-push-vs-string-concat\r\n    /*\r\n    let ret = []\r\n    Object.keys(data).forEach(v => {\r\n      ret.push(`${encodeURIComponent(v)}=${encodeURIComponent(data[v])}`)\r\n    })\r\n    return ret.join('&')\r\n    */\r\n    let ret = ''\r\n    Object.keys(data).forEach(v => {\r\n      ret = ret + `${encodeURIComponent(v)}=${encodeURIComponent(data[v])}&`\r\n    })\r\n    return ret.slice(0, -1)\r\n  }\r\n\r\n  /**\r\n   * 类型判断\r\n   *\r\n   * @param {any} unknown\r\n   * @param {boolen} keepCase 保持大小写\r\n   * @return {string}\r\n   */\r\n  type(unknown, keepCase) {\r\n    const type = Object.prototype.toString.call(unknown).slice(8, -1)\r\n    // https://jsperf.com/replace-vs-slice/5\r\n    // return type.replace('[object ', '').replace(']', '').toLowerCase()\r\n    return keepCase ? type : type.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * 将参数列表转为对象形式\r\n   *\r\n   * @param {array} list 参数原始对象，即 arguments\r\n   * @param {array} names 参数名称对应的数组，可以给默认值，默认值需要能被 JSON.parse 解析。\r\n   *\r\n   * 注意：\r\n   *  - 参数的值支持覆盖\r\n   *  - 在遇到对象之后直接退出\r\n   *\r\n   * 示例：\r\n   *   > args([1, 2, {xor: true}], ['offset', 'count'])\r\n   *   < {offset: 1, count: 2, xor: true}\r\n   */\r\n  args(list, names = []) {\r\n    const options = {}\r\n    names.forEach((item, index) => {\r\n      if (item.indexOf('=') > -1) {\r\n        const temp = item.split('=')\r\n        const name = temp[0]\r\n        names[index] = name\r\n        try {\r\n          options[name] = JSON.parse(temp.slice(1).join('='))\r\n        } catch (e) {\r\n          // ignore\r\n        }\r\n      }\r\n    })\r\n    for (let i = 0; i < list.length; i++) {\r\n      const item = list[i]\r\n      const name = names[i]\r\n      if (this.type(item) === 'object') {\r\n        Object.assign(options, item)\r\n        break\r\n      } else if (\r\n        this.type(item) !== 'undefined'\r\n        && this.type(name) !== 'undefined'\r\n      ) {\r\n        options[name] = item\r\n      }\r\n    }\r\n    return options\r\n  }\r\n\r\n  /**\r\n   * 拼接链接地址\r\n   *\r\n   * @param {array<string>} args\r\n   */\r\n  join(...args) {\r\n    let result = args[0] || ''\r\n    for (let i = 1; i < args.length; i++) {\r\n      if (args[i]) {\r\n        result = result.replace(/\\/+$/, '') + '/' + args[i].replace(/^\\/+/, '')\r\n      }\r\n    }\r\n    return result\r\n  }\r\n\r\n  // 需要自行实现 request 方法，基础方法不再进行提供\r\n  request() {\r\n    throw new Error('Not implemented yet')\r\n  }\r\n\r\n}\r\n\r\nexport default API\r\n"],"names":["version","param","data","ret","Object","keys","forEach","v","encodeURIComponent","slice","type","unknown","keepCase","prototype","toString","call","toLowerCase","args","list","names","options","item","index","indexOf","temp","split","name","JSON","parse","join","e","i","length","this","assign","result","replace","request","Error"],"mappings":"8NAKEA,2CAOAC,MAAA,SAAMC,OASAC,EAAM,UACVC,OAAOC,KAAKH,GAAMI,QAAQ,SAAAC,GACxBJ,aAAeK,mBAAmBD,eAAMC,mBAAmBN,EAAKK,WAE3DJ,EAAIM,MAAM,GAAI,MAUvBC,KAAA,SAAKC,EAASC,OACNF,EAAON,OAAOS,UAAUC,SAASC,KAAKJ,GAASF,MAAM,GAAI,UAGxDG,EAAWF,EAAOA,EAAKM,iBAiBhCC,KAAA,SAAKC,OAAMC,yDAAQ,GACXC,EAAU,GAChBD,EAAMb,QAAQ,SAACe,EAAMC,OACM,EAArBD,EAAKE,QAAQ,KAAW,KACpBC,EAAOH,EAAKI,MAAM,KAClBC,EAAOF,EAAK,GAClBL,EAAMG,GAASI,MAEbN,EAAQM,GAAQC,KAAKC,MAAMJ,EAAKf,MAAM,GAAGoB,KAAK,MAC9C,MAAOC,YAKR,IAAIC,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IAAK,KAC9BV,EAAOH,EAAKa,GACZL,EAAOP,EAAMY,MACK,WAApBE,KAAKvB,KAAKW,GAAoB,CAChCjB,OAAO8B,OAAOd,EAASC,SAGH,cAApBY,KAAKvB,KAAKW,IACa,cAApBY,KAAKvB,KAAKgB,KAEbN,EAAQM,GAAQL,UAGbD,KAQTS,KAAA,sCAAQZ,2BAAAA,0BACFkB,EAASlB,EAAK,IAAM,GACfc,EAAI,EAAGA,EAAId,EAAKe,OAAQD,IAC3Bd,EAAKc,KACPI,EAASA,EAAOC,QAAQ,OAAQ,IAAM,IAAMnB,EAAKc,GAAGK,QAAQ,OAAQ,YAGjED,KAITE,QAAA,iBACQ,IAAIC,MAAM"}